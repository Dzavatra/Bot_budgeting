from loader import dp, bot
from aiogram.types import Message, ReplyKeyboardRemove, InputFile
from keyboards.default import menu, paying, incs
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from categories import Categories
import exceptions
import expenses
import incomes


@dp.message_handler(Command('menu'))
async def show_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ',
                         reply_markup=menu)


class FSMExp(StatesGroup):
    categ = State()
    expen = State()
    ptype = State()


@dp.message_handler(Text(equals='–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'), state=None)
async def add_exp(message: Message):
    await FSMExp.categ.set()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞—Ç—ã\n\n/cancel (–æ—Ç–º–µ–Ω–∞)')


@dp.message_handler(state="*", commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state="*")
async def cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=menu)


@dp.message_handler(state=FSMExp.categ)
async def get_cat(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMExp.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É\n\n/cancel (–æ—Ç–º–µ–Ω–∞)')


@dp.message_handler(state=FSMExp.expen)
async def get_sum(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['sum'] = message.text
        user_exp = data['sum'] + ' ' + data['name']
    try:
        expenses._parse_message(user_exp)
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return
    await FSMExp.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã\n\n/cancel (–æ—Ç–º–µ–Ω–∞)', reply_markup=paying)


@dp.message_handler(state=FSMExp.ptype)
async def get_type(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = message.text
        user_exp = data['sum'] + ' ' + data['name']
    ex = expenses.add_expense(user_exp, message.from_user.id, message.text)
    answer_message = (f"–¢—Ä–∞—Ç–∞ —Å—É–º–º–æ–π <b>{ex.amount}</b> —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{ex.category_name.capitalize()}</b>.")
    await message.answer(answer_message, reply_markup=ReplyKeyboardRemove())
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
                         reply_markup=menu)
    await state.finish()


@dp.message_handler(Text(equals='–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
async def today_stat(message: Message):
    answer_message = expenses.get_today_statistics(message.from_user.id)
    if '‚Ä¢ –†–∞—Å—Ö–æ–¥—ã —Å–µ–≥–æ–¥–Ω—è:' in answer_message:
        pic_name = 'pies/today' + '-' + str(message.from_user.id) + '.png'
        await message.answer_photo(InputFile(pic_name), answer_message)
    else:
        await message.answer(answer_message)


@dp.message_handler(Text(equals='–û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é'))
async def month_stat(message: Message):
    answer_message = expenses.get_week_statistics(message.from_user.id)
    if '‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:' in answer_message:
        pic_name = 'pies/week' + '-' + str(message.from_user.id) + '.png'
        await message.answer_photo(InputFile(pic_name), answer_message)
    else:
        await message.answer(answer_message)


@dp.message_handler(Text(equals='–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü'))
async def month_stat(message: Message):
    answer_message = expenses.get_month_statistics(message.from_user.id)
    if '‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ:' in answer_message:
        pic_name = 'pies/month' + '-' + str(message.from_user.id) + '.png'
        await message.answer_photo(InputFile(pic_name), answer_message)
    else:
        await message.answer(answer_message)


@dp.message_handler(Text(equals='–ù–µ–¥–∞–≤–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'))
async def last_exps(message: Message):
    last_exp = expenses.get_last_exps(message.from_user.id)
    if not last_exp:
        await message.answer("–†–∞—Å—Ö–æ–¥–æ–≤ –µ—â—ë –Ω–µ—Ç.")
        return
    l_exp = [
        f"‚Ä¢ {expense.category_name.capitalize()} ‚Äî {expense.date} ‚Äî <b>{expense.amount} —Ä—É–±.</b>  "
        f"(/delete{expense.id} - —É–¥–∞–ª–∏—Ç—å)"
        for expense in last_exp]
    answer_message = "üìù –ù–µ–¥–∞–≤–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:\n\n" + "\n".join(l_exp)
    await message.answer(answer_message)


@dp.message_handler(lambda message: message.text.startswith('/delete'))
async def del_expense(message: Message):
    row_id = int(message.text[7:])
    expenses.delete_expense(row_id)
    answer_message = "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
    await message.answer(answer_message)


@dp.message_handler(Text(equals='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤'))
async def categories_list(message: Message):
    categories = Categories().get_all_categories()
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:\n\n‚Ä¢ " + \
                     ("\n‚Ä¢ ".join(["<b>" + c.name.capitalize() + "</b>" + " (" + ", ".join(c.aliases) + ")" for c in categories])))


class FSMInc(StatesGroup):
    inc = State()
    category = State()
    ptype = State()


@dp.message_handler(Text(equals='–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥'), state=None)
async def add_inc(message: Message):
    await FSMInc.inc.set()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—É–º–º—É\n\n/cancel (–æ—Ç–º–µ–Ω–∞)')


@dp.message_handler(state=FSMInc.inc)
async def get_sum(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['sum'] = message.text
        inc = data['sum']
    try:
        incomes._parse_message(inc)
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return
    await FSMInc.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –¥–æ—Ö–æ–¥–∞\n\n/cancel (–æ—Ç–º–µ–Ω–∞)', reply_markup=incs)


@dp.message_handler(state=FSMInc.category)
async def get_cat(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['cat'] = message.text
    await FSMInc.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è\n\n/cancel (–æ—Ç–º–µ–Ω–∞)', reply_markup=paying)


@dp.message_handler(state=FSMInc.ptype)
async def get_type(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = message.text
        inc = incomes.add_income(data['sum'], data['cat'], data['type'], message.from_user.id)
    answer_message = (f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ —Å—É–º–º–æ–π <b>{inc.amount}</b> —Ä—É–±. —É—á—Ç—ë–Ω.")
    await message.answer(answer_message, reply_markup=ReplyKeyboardRemove())
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=menu)
    await state.finish()


@dp.message_handler(Text(equals='–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥—ã'))
async def last_exps(message: Message):
    last_inc = incomes.get_last_incs(message.from_user.id)
    if not last_inc:
        await message.answer("–î–æ—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    l_inc = [
        f"‚Ä¢ {income.cat} - {income.date} ‚Äî <b>{income.amount} —Ä—É–±.</b>  "
        f"(/remove{income.id} - —É–¥–∞–ª–∏—Ç—å)"
        for income in last_inc]
    answer_message = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥—ã:\n\n" + "\n".join(l_inc)
    await message.answer(answer_message)


@dp.message_handler(lambda message: message.text.startswith('/remove'))
async def del_income(message: Message):
    row_id = int(message.text[7:])
    incomes.delete_income(row_id)
    answer_message = "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
    await message.answer(answer_message)


@dp.message_handler()
async def empty_message(message: Message):
    answer_message = '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.'
    await message.reply(answer_message)
    await message.delete()
